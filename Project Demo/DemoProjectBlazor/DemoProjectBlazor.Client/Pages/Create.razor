@page "/create"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject NavigationManager Navigation
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" />

<PageTitle>Thêm Sinh Viên</PageTitle>

<h2>Thêm Sinh Viên</h2>


<EditForm Model="@sv" OnValidSubmit="@SaveAlumniCuuSv">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-row">
		<div class="form-group col-3">
			<label for="TruongId">Trường:</label>
			<select id="TruongId" class="form-control" @bind="sv.TruongId">
				<option value="">Chọn trường</option>
				@foreach (var truong in truongHocList)
				{
					<option value="@truong.Value">
						@truong.Text
					</option>
				}
			</select>
		</div>

		<div class="form-group col-3">
			<label for="MaSoSv">Mã số sinh viên:</label>
			<input id="MaSoSv" class="form-control" @bind="sv.MaSoSv" required />
		</div>

		<div class="form-group col-3">
			<label for="HoCuuSv">Họ cựu sinh viên:</label>
			<input id="HoCuuSv" class="form-control" @bind="sv.HoCuuSv" @oninput="UpdateHoTenCuuSv" />
		</div>

		<div class="form-group col-3">
			<label for="TenCuuSv">Tên cựu sinh viên:</label>
			<input id="TenCuuSv" class="form-control" @bind="sv.TenCuuSv" @oninput="UpdateHoTenCuuSv" />
		</div>

		<div class="form-group col-3">
			<label for="HoTenCuuSv">Họ tên cựu sinh viên:</label>
			<input id="HoTenCuuSv" class="form-control" @bind="sv.HoTenCuuSv" readonly />
		</div>

		<div class="form-group col-3">
			<label for="MaDinhDanh">Mã định danh:</label>
			<input id="MaDinhDanh" class="form-control" @bind="sv.MaDinhDanh" required />
		</div>

		<div class="form-group col-3">
			<label for="GioiTinh">Giới tính:</label>
			<select id="GioiTinh" class="form-control" @bind="sv.GioiTinh">
				<option value="">Chọn giới tính</option>
				<option value="M">Nam</option>
				<option value="F">Nữ</option>
			</select>
		</div>

		<div class="form-group col-3">
			<label for="Email">Email:</label>
			<input id="Email" class="form-control" @bind="sv.Email" @oninput="CheckEmail" />
			@if (!string.IsNullOrWhiteSpace(ValidateEmail(sv.Email)))
			{
				<div class="text-errors">@ValidateEmail(sv.Email)</div>
			}
		</div>

		<div class="form-group col-3">
			<label for="DanToc">Dân tộc:</label>
			<input id="DanToc" class="form-control" @bind="sv.DanToc" />
		</div>

		<div class="form-group col-3">
			<label for="TonGiao">Tôn giáo:</label>
			<input id="TonGiao" class="form-control" @bind="sv.TonGiao" />
		</div>

		@* <div class="form-group col-3">
			<label for="QuocGiaId">Quốc gia:</label>
			<select id="QuocGiaId" class="form-control" @bind="sv.QuocGiaId">
				<option value="">Chọn trường</option>
				@foreach (var quocGia in quocGiaList)
				{
					<option value="@quocGia.Value" selected="@(sv.QuocGiaId == quocGia.Value ? "selected" : null)">
						@quocGia.Text
					</option>
				}
			</select>
		</div> *@

		<div class="form-group col-3">
			<label for="TinhThanhId">Tỉnh thành:</label>
			<select id="TinhThanhId" class="form-control" @bind="sv.TinhThanhId">
				<option value="">Chọn tỉnh thành</option>
				@foreach (var tinhThanh in tinhThanhList)
				{
					<option value="@tinhThanh.Value">
						@tinhThanh.Text
					</option>
				}
			</select>
		</div>

		<div class="form-group col-3">
			<label for="QuanHuyenId">Quận Huyện:</label>
			<select id="QuanHuyenId" class="form-control" @bind="sv.QuanHuyenId">
				<option value="">Chọn quận huyện</option>
				@foreach (var quanHuyen in quanHuyenList)
				{
					<option value="@quanHuyen.Value">
						@quanHuyen.Text
					</option>
				}
			</select>
		</div>

		<div class="form-group col-3">
			<label for="XaPhuongId">Xã phường:</label>
			<select id="XaPhuongId" class="form-control" @bind="sv.XaPhuongId">
				<option value="">Chọn xã phường</option>
				@foreach (var xaPhuong in phuongXaList)
				{
					<option value="@xaPhuong.Value">
						@xaPhuong.Text
					</option>
				}
			</select>
		</div>

		<div class="form-group col-3">
			<label for="DiaChiLienHe">Địa chỉ liên hệ:</label>
			<input id="DiaChiLienHe" class="form-control" @bind="sv.DiaChiLienHe" />
		</div>

		<div class="form-group col-3">
			<label for="HinhAnhDaiDien">Hình ảnh đại diện:</label>
			<input id="HinhAnhDaiDien" class="form-control" @bind="sv.HinhAnhDaiDien" />
		</div>

		<div class="form-group col-3">
			<label for="ThamGiaDoan">Tham gia đoàn:</label>
			<input id="ThamGiaDoan" class="form-control" @bind="sv.ThamGiaDoan" />
		</div>

		<div class="form-group col-3">
			<label for="NgayVaoDoan">Ngày vào đoàn:</label>
			<input id="NgayVaoDoan" @bind="sv.NgayVaoDoan" type="date" class="form-control" />
		</div>

		<div class="form-group col-3">
			<label for="ThamGiaDang">Tham gia đảng:</label>
			<input id="ThamGiaDang" class="form-control" @bind="sv.ThamGiaDang" />
		</div>

		<div class="form-group col-3">
			<label for="NgayVaoDang">Ngày vào đảng:</label>
			<input id="NgayVaoDang" @bind="sv.NgayVaoDang" type="date" class="form-control" />
		</div>

		<div class="form-group col-3">
			<label for="SoDienThoai">Số điện thoại:</label>
			<input type="number" id="SoDienThoai" class="form-control" @bind="sv.SoDienThoai" @oninput="CheckPhoneNumber" />
			@if (!string.IsNullOrWhiteSpace(ValidatePhoneNumber(sv.SoDienThoai)))
			{
				<div class="text-errors">@ValidatePhoneNumber(sv.SoDienThoai)</div>
			}
		</div>

		<div class="form-group col-3">
			<label for="QuocTich">Quốc tịch:</label>
			<input id="QuocTich" class="form-control" @bind="sv.QuocTich" />
		</div>

		<div class="form-group col-3">
			<label for="NgaySinh">Ngày sinh:</label>
			<input id="NgaySinh" @bind="sv.NgaySinh" class="form-control" Format="dd/MM/yyyy" />
		</div>

		<div class="form-group col-3">
			<label for="NoiSinh">Nơi sinh:</label>
			<input id="NoiSinh" class="form-control" @bind="sv.NoiSinh" />
		</div>

		<div class="button-container">
			<button type="submit" class="btn btn-primary">Thêm Sinh Viên</button>
			<a href="index" class="back-link"><i class="fas fa-arrow-left"></i> Trở lại</a>
		</div>
	</div>
</EditForm>


@code {
	AlumniCuuSv sv = new AlumniCuuSv();
	private List<MvcSelectListItem> quocGiaList = new();
	private List<MvcSelectListItem> truongHocList = new();
	private List<MvcSelectListItem> phuongXaList = new();
	private List<MvcSelectListItem> tinhThanhList = new();
	private List<MvcSelectListItem> quanHuyenList = new();

	public class ApiData
	{
		public List<MvcSelectListItem> QuocGias { get; set; } = new List<MvcSelectListItem>();
		public List<MvcSelectListItem> Truongs { get; set; } = new List<MvcSelectListItem>();
		public List<MvcSelectListItem> TinhThanhs { get; set; } = new List<MvcSelectListItem>();
		public List<MvcSelectListItem> QuanHuyens { get; set; } = new List<MvcSelectListItem>();
		public List<MvcSelectListItem> PhuongXas { get; set; } = new List<MvcSelectListItem>();
	}

	public class MvcSelectListItem
	{
		public string Value { get; set; } = string.Empty;
		// public Guid? Value { get; set; }
		public string Text { get; set; } = string.Empty;
	}

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetFromJsonAsync<ApiData>("api/cuuSinhVien/dataCuuSV");

		if (response != null)
		{
			quocGiaList = response.QuocGias;
			truongHocList = response.Truongs;
			phuongXaList = response.PhuongXas;
			tinhThanhList = response.TinhThanhs;
			quanHuyenList = response.QuanHuyens;
		}
	}


	private async Task SaveAlumniCuuSv()
	{
		// Gọi API để lưu thông tin AlumniCuuSv
		var response = await Http.PostAsJsonAsync("api/cuuSinhVien", sv);

		if (response.IsSuccessStatusCode)
		{
			Navigation.NavigateTo("/index");
		}
		else
		{
			var errorContent = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Error: {errorContent}");
		}
	}
	//Cập nhật họ tên đầy đủ
	private void UpdateHoTenCuuSv()
	{
		sv.HoTenCuuSv = $"{sv.HoCuuSv} {sv.TenCuuSv}";
	}

	//Báo lỗi cho nhập dữ liệu Email với sđt
	private bool showEmailWarning = true;
	private bool isInputStarted = false;

	private void CheckEmail(ChangeEventArgs e)
	{
		sv.Email = e.Value?.ToString() ?? string.Empty;
		isInputStarted = true; // Bắt đầu nhập mới
		ValidateEmail(sv.Email); // Kiểm tra email khi người dùng nhập
		StateHasChanged();
	}

	public string ValidateEmail(string value)
	{
		if (isInputStarted) // Chỉ hiển thị cảnh báo khi người dùng bắt đầu nhập mới
		{
			if (string.IsNullOrWhiteSpace(value))
			{
				showEmailWarning = true; // Hiển thị cảnh báo nếu email để trống
				return "Vui lòng không để trống email";
			}

			if (!value.Contains("@"))
			{
				showEmailWarning = true; // Hiển thị cảnh báo nếu email không chứa '@'
				return "Vui lòng nhập email có ký tự '@'";
			}
		}
		else
		{
			showEmailWarning = false; // Ẩn cảnh báo nếu người dùng chưa bắt đầu nhập mới
		}

		return null!;
	}
	private string phoneWarningMessage = string.Empty;
	private bool showPhoneWarning = false;
	private bool isPhoneInputStarted = false;

	private void CheckPhoneNumber(ChangeEventArgs e)
	{
		sv.SoDienThoai = e.Value?.ToString() ?? string.Empty;
		isPhoneInputStarted = true; // Bắt đầu nhập số điện thoại mới
		phoneWarningMessage = ValidatePhoneNumber(sv.SoDienThoai); // Kiểm tra số điện thoại khi người dùng nhập
		StateHasChanged();
	}

	public string ValidatePhoneNumber(string value)
	{
		if (isPhoneInputStarted) // Chỉ kiểm tra khi người dùng bắt đầu nhập số điện thoại mới
		{
			if (string.IsNullOrWhiteSpace(value))
			{
				showPhoneWarning = true; // Hiển thị cảnh báo nếu số điện thoại để trống
				return "Vui lòng không để trống số điện thoại";
			}

			if (!Regex.IsMatch(value, @"^[0-9]{1,10}$"))
			{
				showPhoneWarning = true; // Hiển thị cảnh báo nếu số điện thoại không hợp lệ
				return "Vui lòng chỉ nhập số (dưới 11 số)";
			}
		}
		else
		{
			showPhoneWarning = false; // Ẩn cảnh báo nếu người dùng chưa bắt đầu nhập số điện thoại mới
		}

		return string.Empty;
	}
}
